{"version":3,"mappings":";4hCAAMA,EAAc,SAAS,iBAAiB,aAAa,EAC3DA,EAAY,QAAQC,GAAc,CAEhC,GADAA,EAAW,UAAU,GACjBA,EAAW,aAAa,aAAa,EAAE,CACzC,MAAMC,EAAa,SAASD,EAAW,aAAa,aAAa,CAAC,EAC5DE,EAAc,SAASF,EAAW,aAAa,cAAc,CAAC,EACpE,IAAIG,EAAgB,IAAI,iBACxB,QAAQC,EAAI,EAAGA,EAAIH,EAAYG,IAAK,CAClC,IAAIC,EAAI,SAAS,cAAc,GAAG,EAClCA,EAAE,aAAa,QAASD,CAAC,EACzBC,EAAE,UAAYD,EAAI,EAClBC,EAAE,UAAU,IAAI,iBAAiB,EAC7BD,IAAIF,GAAaG,EAAE,UAAU,IAAI,UAAU,EAC/CF,EAAc,YAAYE,CAAC,CAC5B,CACDL,EAAW,YAAYG,CAAa,EACpCH,EAAW,iBAAiB,QAAS,MAAOM,GAAM,CAC5CA,EAAE,OAAO,UAAU,SAAS,iBAAiB,IACjCN,EAAW,iBAAiB,kBAAkB,EACtD,QAAQO,GAAQ,CAClBA,EAAK,UAAU,OAAO,UAAU,CAC5C,CAAS,EACDD,EAAE,OAAO,UAAU,IAAI,UAAU,EACjCA,EAAE,OAAO,cAAc,aAAa,eAAgBA,EAAE,OAAO,aAAa,OAAO,CAAC,EAG1F,CAAK,CACF,CACH,CAAC,ECvBG,OAAO,SAAS,SAAS,SAAS,iBAAiB,GACpDE,EAAA,IAAC,mBAA+B,uBAInC,eAAeC,GAAkB,CAC7B,GAAI,CAAC,OAAO,YACR,GAAI,CAEA,MAAMC,GADoB,MAAMF,EAAA,WAAO,4BAAsB,OACvB,QACtC,OAAO,YAAc,IAAIE,EACzB,MAAM,IAAI,QAAQC,GAAW,WAAWA,EAAS,GAAG,CAAC,CACxD,OAAQC,EAAO,CACZ,eAAQ,MAAM,kCAAmCA,CAAK,EAC/C,IACV,CAEL,OAAO,OAAO,WAClB,CAGA,SAAS,iBAAiB,mBAAoB,SAAY,CACtD,GAAI,CAEA,GAAI,OAAO,SAAS,SAAS,SAAS,iBAAiB,EAAG,CAEtD,MAAMH,EAAe,EAGrB,MAAMI,EAAqB,SAAS,eAAe,YAAY,EAC3DA,GACAA,EAAmB,iBAAiB,QAAS,MAAOP,GAAM,CACtDA,EAAE,eAAc,EACZ,OAAO,YACP,OAAO,YAAY,YAEnB,QAAQ,MAAM,6BAA6B,CAEnE,CAAiB,CAER,CACJ,OAAQM,EAAO,CACZ,QAAQ,MAAM,mCAAoCA,CAAK,CAC1D,CACL,CAAC","names":["paginations","pagination","totalPages","currentPage","pagesFragment","i","p","e","page","__vitePreload","initTaskManager","TaskManager","resolve","error","floatingAddTaskBtn"],"ignoreList":[],"sources":["../../src/partials/components/pagination/PaginationComponent.js","../../src/main.js"],"sourcesContent":["const paginations = document.querySelectorAll('.pagination');\npaginations.forEach(pagination => {\n  pagination.innerHTML='';\n  if (pagination.hasAttribute('total-pages')){\n    const totalPages = parseInt(pagination.getAttribute('total-pages'));\n    const currentPage = parseInt(pagination.getAttribute('current-page'));\n    let pagesFragment = new DocumentFragment();\n    for(let i = 0; i < totalPages; i++) {\n      let p = document.createElement('p');\n      p.setAttribute('index', i);\n      p.innerHTML = i + 1;\n      p.classList.add('pagination-page');\n      if (i===currentPage){p.classList.add('selected');}\n      pagesFragment.appendChild(p);\n    }\n    pagination.appendChild(pagesFragment);\n    pagination.addEventListener('click', async (e) => {\n      if (e.target.classList.contains('pagination-page')){\n        const pages = pagination.querySelectorAll('.pagination-page');\n        pages.forEach(page => {\n            page.classList.remove('selected');\n        })\n        e.target.classList.add('selected');\n        e.target.parentElement.setAttribute('current-page', e.target.getAttribute('index'));\n      }\n\n    })\n  }\n})","// Импортируем общие стили\nimport './css/styles.css';\nimport './partials/components/pagination/PaginationComponent.js'\n\n// Если мы на странице task-management, загружаем дополнительные стили\nif (window.location.pathname.includes('task-management')) {\n    import('./css/task-manager.css');\n}\n\n// Функция для инициализации TaskManager\nasync function initTaskManager() {\n    if (!window.taskManager) {\n        try {\n            const TaskManagerModule = await import('./js/task-manager.js');\n            const TaskManager = TaskManagerModule.default;\n            window.taskManager = new TaskManager();\n            await new Promise(resolve => setTimeout(resolve, 200));\n        } catch (error) {\n            console.error('Error initializing TaskManager:', error);\n            return null;\n        }\n    }\n    return window.taskManager;\n}\n\n// Инициализируем обработчики кнопок\ndocument.addEventListener('DOMContentLoaded', async () => {\n    try {\n        // Если мы на странице task-management\n        if (window.location.pathname.includes('task-management')) {\n            // Инициализируем TaskManager\n            await initTaskManager();\n\n            // Обработчик для плавающей кнопки\n            const floatingAddTaskBtn = document.getElementById('addTaskBtn');\n            if (floatingAddTaskBtn) {\n                floatingAddTaskBtn.addEventListener('click', async (e) => {\n                    e.preventDefault();\n                    if (window.taskManager) {\n                        window.taskManager.showModal();\n                    } else {\n                        console.error('TaskManager not initialized');\n                    }\n                });\n            }\n        }\n    } catch (error) {\n        console.error('Error initializing task manager:', error);\n    }\n});\n\n"],"file":"assets/index-BkMJSJ61.js"}