class c{constructor(){this.tasks=[],this.currentTaskId=null,this.modalEscapeListener=null,this.loadTheme(),this.loadTasks().then(()=>{this.init()})}async loadTasks(){try{const t=await(await fetch("https://script.google.com/macros/s/AKfycbwMbiYIzsnP07ciF6zVwV3jiajZT6_fNFBnYxN1vRJJbuQ2VVaS12a6RwYiRV3IxTjP/exec")).json();this.tasks=t.tasks||[],this.renderTasks()}catch(e){console.error("Error loading tasks:",e),this.tasks=[]}}async saveTasks(){try{if(!(await fetch("https://script.google.com/macros/s/AKfycbwMbiYIzsnP07ciF6zVwV3jiajZT6_fNFBnYxN1vRJJbuQ2VVaS12a6RwYiRV3IxTjP/exec",{method:"POST",body:JSON.stringify({tasks:this.tasks})})).ok)throw new Error("Failed to save tasks");console.log("Tasks saved successfully")}catch(e){console.error("Error saving tasks:",e),alert("Не удалось сохранить изменения. Попробуйте еще раз.")}}init(){this.setupEventListeners(),this.renderTasks(),this.setupDragAndDrop()}setupEventListeners(){console.log("Setting up event listeners");const e=document.getElementById("addTaskBtn");console.log("Add button:",e),e.addEventListener("click",()=>{console.log("Add button clicked"),this.currentTaskId=null,this.showModal()}),document.querySelector(".close").addEventListener("click",()=>{this.hideModal()}),document.getElementById("taskForm").addEventListener("submit",s=>{s.preventDefault(),this.handleFormSubmit()}),document.getElementById("themeToggleBtn").addEventListener("click",()=>{this.toggleTheme()}),document.getElementById("taskNumber").addEventListener("input",s=>{this.handleTaskNumberInput(s.target.value)}),document.addEventListener("click",s=>{s.target.closest(".task-number-container")||(document.getElementById("taskNumberSuggestions").style.display="none")}),document.getElementById("addAssigneeBtn").addEventListener("click",()=>{this.addAssigneeField()}),document.getElementById("assigneesList").addEventListener("click",s=>{if(s.target.classList.contains("remove-assignee-btn")){const n=s.target.closest(".assignee-item");n&&document.querySelectorAll(".assignee-item").length>1&&n.remove()}}),document.getElementById("addSubtaskBtn").addEventListener("click",()=>{this.addSubtaskField()}),document.getElementById("subtasksList").addEventListener("click",s=>{s.target.classList.contains("remove-subtask-btn")&&s.target.closest(".subtask-item").remove()})}addAssigneeField(){document.getElementById("assigneesList").appendChild(this.createAssigneeItem("empty"))}addSubtaskField(e="",t=!1){const s=document.getElementById("subtasksList"),n=document.createElement("div");n.className="subtask-item",n.innerHTML=`
            <input type="checkbox" class="subtask-checkbox" ${t?"checked":""}>
            <input type="text" class="subtask-text" value="${e}" placeholder="Введите подзадачу">
            <button type="button" class="remove-subtask-btn">×</button>
        `,s.appendChild(n)}handleTaskNumberInput(e){const t=document.getElementById("taskNumberSuggestions"),s=document.getElementById("taskNumber");if(!e){s.classList.remove("exists","available"),t.style.display="none";return}const n=this.tasks.map(i=>i.taskNumber).filter(i=>i).sort((i,o)=>i-o),a=n.includes(e);if(s.classList.toggle("exists",a),s.classList.toggle("available",!a&&e.length>0),e.length>0){const i=n.filter(o=>o.toString().includes(e)).slice(0,5);i.length>0?(t.innerHTML=i.map(o=>`
                        <div class="suggestion-item" onclick="window.taskManager.selectTaskNumber('${o}')">
                            ${o}
                        </div>
                    `).join(""),t.style.display="block"):t.style.display="none"}else t.style.display="none"}selectTaskNumber(e){document.getElementById("taskNumber").value=e,document.getElementById("taskNumberSuggestions").style.display="none"}showModal(e=null){var o;const t=document.getElementById("taskModal"),s=document.getElementById("taskForm"),n=document.getElementById("assigneesList"),a=t.querySelector(".delete-task-btn");a.style.display=e?"block":"none",n.innerHTML="";const i=document.getElementById("subtasksList");if(i.innerHTML="",e){const r=this.tasks.find(d=>d.id===e);r&&(s.taskNumber.value=r.taskNumber||"",s.taskTitle.value=r.title,s.taskDescription.value=r.description,s.taskCategory.value=r.category,s.taskPriority.value=r.priorityStatus,s.taskStatus.value=r.progressStatus,(r.assignees||[r.assignee||"empty"]).forEach(l=>{n.appendChild(this.createAssigneeItem(l))}),(o=r.subtasks)==null||o.forEach(l=>{this.addSubtaskField(l.text,l.completed)}),this.currentTaskId=e)}else s.reset(),s.taskCategory.value="Must_Have",n.appendChild(this.createAssigneeItem("empty"));t.style.display="block",a.onclick=()=>this.showDeleteConfirmation(e),this.modalEscapeListener=r=>{r.key==="Escape"&&this.hideModal()},document.addEventListener("keydown",this.modalEscapeListener),t.addEventListener("click",r=>{r.target===t&&this.hideModal()})}showDeleteConfirmation(e){const t=document.getElementById("deleteConfirmModal");t.style.display="block";const s=()=>{this.deleteTask(e),t.style.display="none",this.hideModal(),o()},n=()=>{t.style.display="none",o()},a=r=>{r.target===t&&(t.style.display="none",o())},i=r=>{r.key==="Escape"&&(t.style.display="none",o())},o=()=>{document.getElementById("confirmDelete").removeEventListener("click",s),document.getElementById("cancelDelete").removeEventListener("click",n),t.removeEventListener("click",a),document.removeEventListener("keydown",i)};document.getElementById("confirmDelete").addEventListener("click",s),document.getElementById("cancelDelete").addEventListener("click",n),t.addEventListener("click",a),document.addEventListener("keydown",i)}hideModal(){const e=document.getElementById("taskModal");e.style.display="none",this.modalEscapeListener&&(document.removeEventListener("keydown",this.modalEscapeListener),this.modalEscapeListener=null)}handleFormSubmit(){const e=document.getElementById("taskForm"),t=Array.from(e.querySelectorAll(".subtask-item")).map(a=>({id:Date.now()+Math.random().toString(36).substr(2,9),text:a.querySelector(".subtask-text").value,completed:a.querySelector(".subtask-checkbox").checked})),s=Array.from(e.querySelectorAll(".taskAssignee")).map(a=>a.value).filter(a=>a);s.length===0&&s.push("empty");const n={title:e.taskTitle.value,taskNumber:e.taskNumber.value||null,description:e.taskDescription.value,category:e.taskCategory.value,priorityStatus:e.taskPriority.value,progressStatus:e.taskStatus.value,assignees:s,subtasks:t};if(n.taskNumber&&this.tasks.some(i=>i.taskNumber===n.taskNumber&&i.id!==this.currentTaskId)){alert("Задача с таким номером уже существует!");return}this.currentTaskId?this.updateTask(this.currentTaskId,n):this.addTask(n),this.hideModal(),this.renderTasks()}addTask(e){const t=()=>{const a=Date.now(),i=Math.floor(Math.random()*1e4);return`${a}-${i}`};let s;do s=t();while(this.tasks.some(a=>a.id===s));const n={id:s,taskNumber:e.taskNumber||null,title:e.title,description:e.description,category:e.category||"Must_Have",priorityStatus:e.priorityStatus,progressStatus:e.progressStatus,assignees:e.assignees,subtasks:e.subtasks||[],createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};this.tasks.push(n),this.saveTasks()}updateTask(e,t){const s=this.tasks.findIndex(n=>n.id===e);s!==-1&&(this.tasks[s]={...this.tasks[s],taskNumber:t.taskNumber,title:t.title,description:t.description,category:t.category,priorityStatus:t.priorityStatus,progressStatus:t.progressStatus,assignees:t.assignees,subtasks:t.subtasks,updatedAt:new Date().toISOString()},this.saveTasks())}deleteTask(e){this.tasks=this.tasks.filter(t=>t.id!==e),this.saveTasks(),this.renderTasks()}renderTasks(){document.querySelectorAll(".drop-zone").forEach(s=>{s.innerHTML=""}),this.tasks.forEach(s=>{if(!s.assignees&&s.assignee&&(s.assignees=[s.assignee],delete s.assignee),s.assignees.some(a=>a!=="empty")){const a=this.createTaskElement(s),i=document.querySelector(`.drop-zone[data-priority="${s.priorityStatus}"][data-status="${s.progressStatus}"]`);i&&i.appendChild(a)}});const e=document.querySelector(".must-have-grid");if(e){e.innerHTML="";const s=this.tasks.filter(a=>a.category==="Must_Have"),n=this.groupTasksByAssignee(s,!0);this.renderGroupedTasks(n,e)}const t=document.querySelector(".upgrade-grid");if(t){t.innerHTML="";const s=this.tasks.filter(a=>a.category==="Upgrade"),n=this.groupTasksByAssignee(s,!0);this.renderGroupedTasks(n,t)}}createTaskElement(e){var a;const t=document.createElement("div");t.className="task-card",t.draggable=!0,t.dataset.taskId=e.id;const s=(e.assignees||[e.assignee||"empty"]).filter(i=>i!=="empty"),n=e.taskNumber||(typeof e.id=="string"?e.id.slice(-4):String(e.id).slice(-4));if(t.innerHTML=`
            <div class="task-card-header">
                <div class="task-left">
                    <h4 class="task-title">${e.title}</h4>
                    <div class="task-number">#${n}</div>
                    <p class="task-description">${e.description}</p>
                </div>
                <div class="task-right">
                    <div class="assignees-list">
                        ${s.map(i=>`
                            <div class="assignee-badge">${i}</div>
                        `).join("")}
                    </div>
                    <div class="task-status-badge">${e.progressStatus}</div>
                    <div class="category-badge" data-category="${e.category}">${e.category}</div>
                </div>
            </div>
        `,((a=e.subtasks)==null?void 0:a.length)>0){const i=e.subtasks.filter(r=>r.completed).length,o=e.subtasks.length;t.querySelector(".task-left").insertAdjacentHTML("beforeend",`
                <div class="subtasks-progress">
                    ${i}/${o}
                </div>
            `)}return t.addEventListener("click",()=>this.showModal(e.id)),t}setupDragAndDrop(){console.log("Setting up drag and drop"),document.addEventListener("dragstart",t=>{console.log("Drag started:",t.target),t.target.classList.contains("task-card")&&(t.target.classList.add("dragging"),t.dataTransfer.setData("text/plain",t.target.dataset.taskId))}),document.addEventListener("dragend",t=>{t.target.classList.contains("task-card")&&t.target.classList.remove("dragging")}),document.querySelectorAll(".drop-zone").forEach(t=>{t.addEventListener("dragover",s=>{s.preventDefault(),t.classList.add("dragover")}),t.addEventListener("dragleave",s=>{t.classList.remove("dragover")}),t.addEventListener("drop",s=>{s.preventDefault(),t.classList.remove("dragover");const n=s.dataTransfer.getData("text/plain"),a=this.tasks.find(i=>i.id===n);a&&(!a.assignees&&a.assignee&&(a.assignees=[a.assignee],delete a.assignee),a.priorityStatus=t.dataset.priority,a.progressStatus=t.dataset.status,a.updatedAt=new Date().toISOString(),this.saveTasks(),this.renderTasks())})})}loadTheme(){const e=localStorage.getItem("theme")||"dark";document.documentElement.setAttribute("data-theme",e)}toggleTheme(){const t=document.documentElement.getAttribute("data-theme")==="dark"?"light":"dark";document.documentElement.setAttribute("data-theme",t),localStorage.setItem("theme",t)}groupTasksByAssignee(e,t=!1){const s={};return e.forEach(n=>{(n.assignees||[n.assignee||"empty"]).forEach(i=>{(i!=="empty"||t)&&(s[i]||(s[i]=[]),s[i].includes(n)||s[i].push(n))})}),s}renderGroupedTasks(e,t){Object.entries(e).forEach(([s,n])=>{const a=document.createElement("div");a.className="task-assignee",a.innerHTML=`
                <div class="assignee-name ${s==="empty"?"empty-assignee":""}">
                    ${s}
                </div>
                ${n.map(o=>`
                    <div class="task-status" data-task-id="${o.id}">${o.progressStatus}</div>
                `).join("")}
            `,a.addEventListener("click",o=>{const r=o.target.dataset.taskId;r&&this.showModal(r)}),t.appendChild(a);const i=document.createElement("div");i.className="task-content",i.innerHTML=n.map(o=>`
                <div class="task-item" data-task-id="${o.id}">
                    <h4>${o.title}</h4>
                    <div class="task-assignees">
                        ${(o.assignees||[o.assignee||"empty"]).map(r=>`
                            <span class="assignee-badge">${r}</span>
                        `).join("")}
                    </div>
                    <p>${o.description}</p>
                </div>
            `).join(""),i.addEventListener("click",o=>{const r=o.target.closest(".task-item");if(r){const d=r.dataset.taskId;this.showModal(d)}}),t.appendChild(i)})}createAssigneeSelect(){return`
            <select class="taskAssignee" required>
                <option value="empty">Empty</option>
                <option value="Andrii Sushylnikov">Andrii Sushylnikov</option>
                <option value="Daria Honcharuk">Daria Honcharuk</option>
                <option value="Dmytro Mayevsky">Dmytro Mayevsky</option>
                <option value="Maks Ki">Maks Ki</option>
                <option value="Mariia Sv.">Mariia Sv.</option>
                <option value="Roman Turas">Roman Turas</option>
                <option value="Viktoriia Didenko">Viktoriia Didenko</option>
                <option value="Hryhorii Chernysh">Hryhorii Chernysh (Mentor)</option>
                <option value="Daria">Daria (client manager)</option>
                <option value="Lesya Katanova">Lesya Katanova</option>
                <option value="Olena Deineha">Olena Deineha</option>
            </select>
        `}createAssigneeItem(e="empty"){const t=document.createElement("div");return t.className="assignee-item",t.innerHTML=`
            ${this.createAssigneeSelect()}
            <button type="button" class="remove-assignee-btn">×</button>
        `,t.querySelector("select").value=e,t}}document.addEventListener("DOMContentLoaded",()=>{window.taskManager=new c});
//# sourceMappingURL=task-manager-Cv--nyge.js.map
